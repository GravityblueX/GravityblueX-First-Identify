# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: teamsync

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: teamsync-config
  namespace: teamsync
data:
  NODE_ENV: "production"
  REDIS_URL: "redis://redis-service:6379"
  CLIENT_URL: "https://teamsync.com"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: teamsync-secrets
  namespace: teamsync
type: Opaque
data:
  # Base64 encoded values
  DATABASE_URL: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAcG9zdGdyZXM6NTQzMi90ZWFtc3luYw==
  JWT_SECRET: eW91ci1zdXBlci1zZWN1cmUtand0LXNlY3JldA==
  CLOUDINARY_URL: Y2xvdWRpbmFyeTovL2FwaV9rZXk6YXBpX3NlY3JldEBjbG91ZF9uYW1l

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: teamsync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: teamsync
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: teamsync
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: teamsync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: teamsync
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: teamsync-backend
  namespace: teamsync
spec:
  replicas: 3
  selector:
    matchLabels:
      app: teamsync-backend
  template:
    metadata:
      labels:
        app: teamsync-backend
    spec:
      containers:
      - name: backend
        image: teamsync/backend:latest
        ports:
        - containerPort: 5000
        env:
        - name: PORT
          value: "5000"
        envFrom:
        - configMapRef:
            name: teamsync-config
        - secretRef:
            name: teamsync-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: teamsync-backend-service
  namespace: teamsync
spec:
  selector:
    app: teamsync-backend
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: teamsync-frontend
  namespace: teamsync
spec:
  replicas: 2
  selector:
    matchLabels:
      app: teamsync-frontend
  template:
    metadata:
      labels:
        app: teamsync-frontend
    spec:
      containers:
      - name: frontend
        image: teamsync/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.teamsync.com"
        - name: NEXT_PUBLIC_SOCKET_URL
          value: "https://api.teamsync.com"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: teamsync-frontend-service
  namespace: teamsync
spec:
  selector:
    app: teamsync-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: teamsync-ingress
  namespace: teamsync
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/websocket-services: "teamsync-backend-service"
spec:
  tls:
  - hosts:
    - teamsync.com
    - api.teamsync.com
    secretName: teamsync-tls
  rules:
  - host: teamsync.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: teamsync-frontend-service
            port:
              number: 3000
  - host: api.teamsync.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: teamsync-backend-service
            port:
              number: 5000

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: teamsync-backend-hpa
  namespace: teamsync
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: teamsync-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# PersistentVolumeClaim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: teamsync
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: teamsync-network-policy
  namespace: teamsync
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: teamsync
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - {}

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: teamsync-backend-monitor
  namespace: teamsync
spec:
  selector:
    matchLabels:
      app: teamsync-backend
  endpoints:
  - port: "5000"
    path: /metrics
    interval: 30s